---
title: "Decompositions Algorithms Broken Down and Explained"
author: "Erick Jones"
date: 2020-01-10
categories: ["ORIE Techniques"]
tags: ["R Markdown", "Benders", "Column Generation", "Decomposition", "LP", "MIP", "Algorithms"]
---



## Background

This post explores how to use various decomposition techniques to solve LPs and MIPs. 
I have written these using Gurobi as a solver and as the mathematical formulation software.
This is a reproducible example if you have R Studio just  make sure you have installed the correct packages.



```{r setup, include=FALSE}
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)


```


```{r}
library(gurobi)
library(tictoc)
library(Matrix)
library(ggplot2)

```
## Extreme Points

Using homogenous equations to generate extreme points for (optimality) and extreme rays for (feasiblity)
max 2x1 + x2 + 13x3 + 7y1 + 5y2
s.t. 9x1+4x2+14x3+35y1+24y2 <= 80; -x1-2x2+3x3-3y1+4y2 <= 10
x >=0, y>= 0, x is int

RMP
max z + 2x1 + x2 + 13x3
 z >= + (80-9x1-4x2-14x3)*u1 + (10+x1+2x2-3x3)*u2 u == 0 initial guess

```{r}


u <- c(0,0)
RMP <- list()

RMP$A          <- matrix(c(1,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
RMP$obj        <- c(1,2,1,13)
RMP$modelsense <- 'max'
RMP$rhs        <- c((80*u[1]+10*u[2]))
RMP$sense      <- c('<')
RMP$vtype      <- c('C','I','I','I')

result <- gurobi(RMP)

UB <- result$objval
print(paste('RMP Objective Value and New Upper bound:', result$objval))
print(paste('Value of z:', result$x[1]))
x <- result$x[-1]
print(paste('Value of x:', t(as.matrix(x))))

if(result$status == "INF_OR_UNBD" | result$status == "UNBOUNDED"){
  UB <- 999999
  x <- c(0,0,0)
}

rm(result)

#Primal Subproblem
# 2x1 + x2 + 13x3 + max 7y1 + 5y2
#s.t. 35y1+24y2 <= 80-(9x1+4x2+14x3); -3y1+4y2 <= 10-(-x1-2x2+3x3)

LB <- -999999

LB_list <- LB
UB_list <- UB
x_list <- x
u_list <- u
y <- c(0,0)
y_list <- y

#Keeps adding Benders Cuts to Problem
while(LB != UB){

#Dual Subproblem
#min (80-(9x1+4x2+14x3))u1 + (10-(-x1-2x2+3x3))u2
#s.t. 35u1 -3u2 >= 7; 24u1+4u2 >= 5

DSB <- list()

DSB$A          <- matrix(c(35,-3,24,4), nrow=2, byrow=T)
DSB$obj        <- c((80-9*x[1]-4*x[2]-14*x[3]),(10+x[1]+2*x[2]-3*x[3]))
DSB$modelsense <- 'min'
DSB$rhs        <- c(7,5)
DSB$sense      <- c('>', '>')

result <- gurobi(DSB)

LB <- result$objval + 2 * x[1] + x[2] + 13*x[3]
print(paste('DSB Objective Value and New Lower bound:', LB))
u <- result$x
y <- result$pi
print(paste('Value of u:', u))
print(paste('Value of y:', y))



#add new constraint
#z >= u[1]*(3-y1) + u[2]*(4-3y1)
#z + (u[1]*y1) + u[2]*3y1 >= u[1]*3+u[2]*4

B <- matrix(c(1,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
b <- u[1]*80+u[2]*10

if(result$status == "INF_OR_UNBD" | result$status == 'UNBOUNDED'){
  DSB$A <- rbind(DSB$A,c(1,1))
  DSB$rhs <- c(0,0,1)
  DSB$sense <- c(DSB$sense, '=')
  result <- gurobi(DSB)
  u <- result$x
  LB <- LB_list[length(LB_list)]
  B <- matrix(c(0,(u[1]*9-u[2]),(u[1]*4-2*u[2]),(14*u[1]+3*u[2])), nrow=1, byrow=T)
  b <- u[1]*80+u[2]*10
  
  
}

u_list <- rbind(u_list,u)
y_list <- rbind(y_list,y)
LB_list <- c(LB_list, LB)

rm(result)


RMP$A <- rbind(RMP$A, B)
RMP$rhs <- c(RMP$rhs,b)
RMP$sense <- c(RMP$sense, '<')


result <- gurobi(RMP)

UB <- result$objval
print(paste('RMP Objective Value and New Upper bound:', result$objval))
print(paste('Value of z:', result$x[1]))
x <- result$x[-1]
print(paste('Value of x:', t(as.matrix(x))))

if(result$status == "INF_OR_UNBD"){
  UB <- 999999
  x <- c(0,0,0)
}

UB_list <- c(UB_list, UB)
x_list <- rbind(x_list,x)
rm(result)

}

LB_list
UB_list
u_list
y_list
x_list


rm(b,B,DSB,LB,LB_list,RMP,u,u_list,UB,UB_list,x,x_list,y,y_list)
```


## Column Generation Algorithm - #Cutting Stock Problem

minimize number of rods used (x). Satisfy demand for 44 81 cm pieces, 3 70 cm pieces, and 48 68 cm pieces
min x1 + x2 + x3
s.t. x1 >= 44; x2 >=3; x3 >= 48
x >=0,


```{r}



LMP <- list()

LMP$A          <- matrix(c(1,0,0,
                           0,1,0,
                           0,0,1), nrow=3, byrow=T)
LMP$obj        <- c(1,1,1)
LMP$modelsense <- 'min'
LMP$rhs        <- c(44,3,48)
LMP$sense      <- c('>')

result <- gurobi(LMP)

k <- -1

while(k < 0){


KSP <- list()

KSP$A          <- matrix(c(81,70,68), nrow=1, byrow=T)
KSP$obj        <- result$pi
KSP$modelsense <- 'max'
KSP$rhs        <- c(218)
KSP$sense      <- c('<')
KSP$vtype      <- c('I','I','I')

result <- gurobi(KSP)

k <- 1 - sum(result$x*KSP$obj)

B <- as.matrix(result$x)

LMP$A <- cbind(LMP$A,B)

LMP$obj <- c(LMP$obj,1)

result <- gurobi(LMP)

print(paste('LMP Objective Value', result$objval))

print(paste('Sum of Reduced Cost:', k))

print(LMP$A)

print(t(as.matrix(result$x)))

}

LMP$vtype      <- rep('I', ncol(LMP$A))

result <- gurobi(LMP)

print(paste('Integer Objective Value', result$objval))

LMP$A

t(as.matrix(result$x))

rm(B,k,KSP,LMP,result)

```


